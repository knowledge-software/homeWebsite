#!/usr/local/perl -w#=begin documentation	This is a simple Perl script to fetch the source html from a given site and extract a 	set of data values contained in tables.	The first argument is the URL to grab=cut $baseURL  = $ARGV[0];#($destFile = $ARGV[1]) =~ s/\:\.\:dasBoot(.+)/$1/;  ## Startup volumes are special.  They are not listed in the VOLUMES folder.#	Open a stream to the source so we can read it as a stream#	n.b. we could have used a fork but this would require us to load the whole thing into memory.if ( !open( URLPATH, "curl -fs $baseURL |") ) {	die "Can't open $baseURL\n";	}##	Skip past everything until the end of the first tablewhile( <URLPATH> ) {	push( @wholething, split /[\<\>]/  );  # by split every html token on a line	}close URLPATH;##	Search for the third table entry$tblcount = 3;foreach( @wholething ) {	if ( $tblcount==0 ) {		push( @theTable, $_ );		}	$tblcount-- if /\/table/;	}	#	Now we run the state engine. #		is idle most of the time				0#		a /tr starting a line begins a new line 1 state returns to 0#		a th or td starts a data output collection	2 state stays the same until#		a /th or /td stops data output$state = 0;foreach  $word ( @theTable ) {#	$state=0 if $word =~ /tr.*/;  # I don't know why this is needed. But it seems to be required. HACKALERRT!			if ( $state == 1 ) {#		print "\n";		push( @theData, "\n" );		$state = 0;		}	elsif ( $state == 2 ) {		$word =~ s/br//;				# eliminate <br>		push( @element, $word ) if $word !~ m!\/t[dh]!;  # don't push </td> or </th>		}	elsif ( $state == 3 ) {#		print join("",@element);		push( @theData, join("",@element) );#		print "\t";		push( @theData, "\t" );		undef @element;			# clean up and reinitialize element		$state = 0;		}	else {		$state = 0;		}	$state = 1 if $word =~ /\/tr.*/;	$state = 2 if $word =~ /t[dh].*/;	$state = 3 if $word =~ /\/t[dh]/;	}#	Now the data is organized in a more sensible way.# 	Process the data so it is more user friendly## Recombine the data in a more realistic way.@theData	= split "\n", join( "", @theData );@todayDate	= split "-",`date +%d-%m-%y-%h`;if ( !open( OF, "+>weatherData.txt") ) {	die "Can't open data file\n";	}# The first three lines are uselessfor( $i=$#theData-3; $i>2; $i-- ) {	#	## extract elements	@elements = split "\t", $theData[$i];		#	We need to handle the case where the day value is not of this month. i.e. it is > $todayDate	if ( $elements[0] > $todayDate[0] ) {		# step back one month		print OF sprintf ( "%s/%s/%s.%s\t", ($todayDate[1]-1,$elements[0],$todayDate[2],$elements[1]) );		}	else {		## 	time stamps		print OF sprintf ( "%s/%s/%s.%s\t", ($todayDate[1],$elements[0],$todayDate[2],$elements[1]) );		}	#	##	temp data	print OF sprintf ( "%s\t%s\t", ($elements[6],$elements[7]) );	#	##	barometric data, rainfall	print OF sprintf ( "%s\t", ($elements[11]) );	#	##	$elements[12] = "0.00" if !defined $elements[12];	print OF sprintf ( "%s\t", ($elements[12]));	#	##	wind data	print OF sprintf ( "%s\t%s\t%s\t%s", ($elements[2],$elements[3],$elements[4],$elements[5]) );#	print OF, $theData[$i];	print OF "\n";	}close OF;### Plot the data  rectangle="1 1 4 2.5" y2=3 name2="DewP" name="Temp"  outline=yes xmargin=0.0 xnearest=hour #$plotCMD 	= "ploticus -png -prefab chron";#$plotDATA 	= "data=sample.txt delim=tab datefmt=mm/dd/yy unittype=datetime x=1 y=2 y2=3 mode=bars";#$plotFMT 	= "title=\"Temperatures\" barwidth=0.01 xstubdet=\"size=6\"";#$plotX 		= "xinc=\"0.25 day\" stubfmt=hhA autodays=Mmmdd xnearest=exact";#$plotY		= "ylbl=\"Temp °F\" ygrid=yes";#$cmd		= '`';#`ploticus -png -prefab chron data=sample.txt delim=tab x=1 y=2 y2=3 title="Temperatures" datefmt=mm/dd/yy stubfmt=hhA mode=bars barwidth=0.01 xstubdet="size=6" xmargin=0.0 ylbl="Temp °F" xinc="0.25 day" autodays=Mmmdd ygrid=yes unittype=datetime`;# eval (join " ", ($cmd, $plotCMD, $plotDATA, $plotFMT, $plotX, $plotY, $cmd) );#`ploticus -png  temp.p`; ## use the plotfile method#`ploticus -png  baro.p`; ## use the plotfile methodexit(0);